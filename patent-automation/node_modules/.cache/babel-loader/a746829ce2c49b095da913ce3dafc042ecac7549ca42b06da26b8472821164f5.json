{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srikars Den\\\\OneDrive\\\\Desktop\\\\patent-automation\\\\patent-automation\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\n// Main.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const [checkNovelty, setCheckNovelty] = useState(false);\n  const [patentData, setPatentData] = useState(\"\");\n\n  // 1) Access the location object\n  const location = useLocation();\n  // 2) Extract title and description from location.state\n  const {\n    title,\n    description\n  } = location.state || {};\n\n  // Fetch patent data from the backend when the component mounts.\n  useEffect(() => {\n    const getPatentData = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/generate\", {\n          title: title,\n          description: description\n        });\n        if (response.status === 200) {\n          setPatentData(response.data.generated_patent_section);\n        }\n      } catch (error) {\n        console.error(\"Error fetching patent data:\", error);\n      }\n    };\n    getPatentData();\n  }, [title, description]);\n\n  // Function to check novelty using the /search endpoint.\n  const novelty = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/search\", {\n        query: description // Using description as the query\n      });\n      if (response.status === 200) {\n        setCheckNovelty(response.data.isNovel);\n      }\n    } catch (error) {\n      alert(\"Error during novelty check: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [checkNovelty ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your patent is novel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"There are too many similarities to your patent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: patentData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: novelty,\n      children: \"Check Novelty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"Ql6jA9J48t4sk+5vOAMv7tFJDCk=\", false, function () {\n  return [useLocation];\n});\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","jsxDEV","_jsxDEV","Main","_s","checkNovelty","setCheckNovelty","patentData","setPatentData","location","title","description","state","getPatentData","response","post","status","data","generated_patent_section","error","console","novelty","query","isNovel","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Srikars Den/OneDrive/Desktop/patent-automation/patent-automation/src/components/Main.jsx"],"sourcesContent":["// Main.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function Main() {\r\n  const [checkNovelty, setCheckNovelty] = useState(false);\r\n  const [patentData, setPatentData] = useState(\"\");\r\n  \r\n  // 1) Access the location object\r\n  const location = useLocation();\r\n  // 2) Extract title and description from location.state\r\n  const { title, description } = location.state || {};\r\n\r\n  // Fetch patent data from the backend when the component mounts.\r\n  useEffect(() => {\r\n    const getPatentData = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/generate\", {\r\n          title: title,\r\n          description: description\r\n        });\r\n        if (response.status === 200) {\r\n          setPatentData(response.data.generated_patent_section);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching patent data:\", error);\r\n      }\r\n    };\r\n    getPatentData();\r\n  }, [title, description]);\r\n\r\n  // Function to check novelty using the /search endpoint.\r\n  const novelty = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/search\", {\r\n        query: description // Using description as the query\r\n      });\r\n      if (response.status === 200) {\r\n        setCheckNovelty(response.data.isNovel);\r\n      }\r\n    } catch (error) {\r\n      alert(\"Error during novelty check: \" + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {checkNovelty ? (\r\n        <h2>Your patent is novel</h2>\r\n      ) : (\r\n        <h2>There are too many similarities to your patent</h2>\r\n      )}\r\n      <p>{patentData}</p>\r\n      <button onClick={novelty}>Check Novelty</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMY,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B;EACA,MAAM;IAAEU,KAAK;IAAEC;EAAY,CAAC,GAAGF,QAAQ,CAACG,KAAK,IAAI,CAAC,CAAC;;EAEnD;EACAd,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,gCAAgC,EAAE;UAClEL,KAAK,EAAEA,KAAK;UACZC,WAAW,EAAEA;QACf,CAAC,CAAC;QACF,IAAIG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3BR,aAAa,CAACM,QAAQ,CAACG,IAAI,CAACC,wBAAwB,CAAC;QACvD;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACDN,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,KAAK,EAAEC,WAAW,CAAC,CAAC;;EAExB;EACA,MAAMU,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,8BAA8B,EAAE;QAChEO,KAAK,EAAEX,WAAW,CAAC;MACrB,CAAC,CAAC;MACF,IAAIG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3BV,eAAe,CAACQ,QAAQ,CAACG,IAAI,CAACM,OAAO,CAAC;MACxC;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdK,KAAK,CAAC,8BAA8B,GAAGL,KAAK,CAACM,OAAO,CAAC;IACvD;EACF,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,GACGrB,YAAY,gBACXH,OAAA;MAAAwB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAE7B5B,OAAA;MAAAwB,QAAA,EAAI;IAA8C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CACvD,eACD5B,OAAA;MAAAwB,QAAA,EAAInB;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB5B,OAAA;MAAQ6B,OAAO,EAAEV,OAAQ;MAAAK,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAAC1B,EAAA,CApDuBD,IAAI;EAAA,QAKTH,WAAW;AAAA;AAAAgC,EAAA,GALN7B,IAAI;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}