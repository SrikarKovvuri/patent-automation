{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srikars Den\\\\OneDrive\\\\Desktop\\\\patent-automation\\\\patent-automation\\\\src\\\\components\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const [checkNovelty, setCheckNovelty] = useState(false);\n  const [patentData, setPatentData] = useState(\"\");\n\n  // Fetch patent data from the backend when the component mounts.\n  useEffect(() => {\n    const getPatentData = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/generate\");\n        if (response.status === 200) {\n          setPatentData(response.data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching patent data:\", error);\n      }\n    };\n    getPatentData();\n  }, []);\n\n  // Function to check novelty using the /search endpoint.\n  const novelty = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/search\", {\n        query: \"Your query text here\" // adjust this as needed\n      });\n      if (response.status === 200) {\n        // response.data should include { isNovel: true/false }\n        setCheckNovelty(response.data.isNovel);\n      }\n    } catch (error) {\n      alert(\"Error during novelty check: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [checkNovelty ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your patent is novel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"There are too many similarities to your patent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: patentData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: novelty,\n      children: \"Check Novelty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"NnLvFPggoJCDVAuCnACH2VSAGBw=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Main","_s","checkNovelty","setCheckNovelty","patentData","setPatentData","getPatentData","response","post","status","data","error","console","novelty","query","isNovel","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Srikars Den/OneDrive/Desktop/patent-automation/patent-automation/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Main() {\r\n  const [checkNovelty, setCheckNovelty] = useState(false);\r\n  const [patentData, setPatentData] = useState(\"\");\r\n\r\n  // Fetch patent data from the backend when the component mounts.\r\n  useEffect(() => {\r\n    const getPatentData = async () => {\r\n      try {\r\n        const response = await axios.post(\"http://localhost:5000/generate\");\r\n        if (response.status === 200) {\r\n          setPatentData(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching patent data:\", error);\r\n      }\r\n    };\r\n    getPatentData();\r\n  }, []);\r\n\r\n  // Function to check novelty using the /search endpoint.\r\n  const novelty = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/search\", {\r\n        query: \"Your query text here\" // adjust this as needed\r\n      });\r\n      if (response.status === 200) {\r\n        // response.data should include { isNovel: true/false }\r\n        setCheckNovelty(response.data.isNovel);\r\n      }\r\n    } catch (error) {\r\n      alert(\"Error during novelty check: \" + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {checkNovelty ? (\r\n        <h2>Your patent is novel</h2>\r\n      ) : (\r\n        <h2>There are too many similarities to your patent</h2>\r\n      )}\r\n      {/* Display the fetched patent data */}\r\n      <p>{patentData}</p>\r\n      {/* Optionally, add a button to trigger novelty check */}\r\n      <button onClick={novelty}>Check Novelty</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,gCAAgC,CAAC;QACnE,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3BJ,aAAa,CAACE,QAAQ,CAACG,IAAI,CAAC;QAC9B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACDL,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,8BAA8B,EAAE;QAChEM,KAAK,EAAE,sBAAsB,CAAC;MAChC,CAAC,CAAC;MACF,IAAIP,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B;QACAN,eAAe,CAACI,QAAQ,CAACG,IAAI,CAACK,OAAO,CAAC;MACxC;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdK,KAAK,CAAC,8BAA8B,GAAGL,KAAK,CAACM,OAAO,CAAC;IACvD;EACF,CAAC;EAED,oBACElB,OAAA;IAAAmB,QAAA,GACGhB,YAAY,gBACXH,OAAA;MAAAmB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAE7BvB,OAAA;MAAAmB,QAAA,EAAI;IAA8C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CACvD,eAEDvB,OAAA;MAAAmB,QAAA,EAAId;IAAU;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEnBvB,OAAA;MAAQwB,OAAO,EAAEV,OAAQ;MAAAK,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAACrB,EAAA,CA/CuBD,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}